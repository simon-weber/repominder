---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: repominder-ingress
  annotations:
    external-dns.alpha.kubernetes.io/hostname: ${SITE}
    external-dns.alpha.kubernetes.io/target: ${KILO_IP}
    kubernetes.io/ingress.class: "nginx"
spec:
  tls:
  - hosts:
    - ${SITE}
    secretName: repominder-cert
  rules:
  - host: ${SITE}
    http:
      paths:
      - path: /assets
        pathType: Prefix
        backend:
          service:
            name: repominder-service
            port:
              number: 80
      - path: /
        pathType: Prefix
        backend:
          service:
            name: repominder-service
            port:
              number: 8000
---
apiVersion: v1
kind: Service
metadata:
  name: repominder-service
spec:
  selector:
    app: repominder
  ports:
  - name: web
    port: 8000
  - name: static
    port: 80
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: repominder-config
data:
  HC_ID_BACKUP: "${HC_ID_BACKUP}"
  HC_ID_CLEANUP: "${HC_ID_CLEANUP}"
  HC_ID_NOTIFY: "${HC_ID_NOTIFY}"
  SITE: ${SITE}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: repominder
spec:
  selector:
    matchLabels:
      app: repominder
  replicas: 1
  template:
    metadata:
      labels:
        app: repominder
    spec:
      nodeSelector:
        kubernetes.io/hostname: kilo
      imagePullSecrets:
      - name: registry-credentials
      initContainers:
      - name: init
        image: ${DOCKER_REPO}/repominder:k8s
        imagePullPolicy: Always
        command: ['./scripts/init.sh']
        envFrom:
        - secretRef:
            name: repominder-web
        - configMapRef:
            name: repominder-config
        volumeMounts:
        - name: appvol
          mountPath: /opt/repominder
        - name: assetvol
          mountPath: /opt/assets
      containers:
      - name: web
        image: ${DOCKER_REPO}/repominder:k8s
        imagePullPolicy: Always
        envFrom:
        - secretRef:
            name: repominder-web
        - configMapRef:
            name: repominder-config
        volumeMounts:
        - name: appvol
          mountPath: /opt/repominder
        ports:
        - containerPort: 8000
      - name: static
        image: nginx
        volumeMounts:
        - name: assetvol
          mountPath: /usr/share/nginx/html/assets
        ports:
        - containerPort: 80
      volumes:
      - name: appvol
        hostPath:
          path: /opt/k3slocal/repominder
          type: DirectoryOrCreate
      - name: assetvol
        hostPath:
          path: /opt/k3slocal/repominder-static
          type: DirectoryOrCreate
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: repominder-cleanup
spec:
  schedule: "30 7 * * *"
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  concurrencyPolicy: Replace
  jobTemplate:
    spec:
      backoffLimit: 3
      activeDeadlineSeconds: 300
      template:
        spec:
          nodeSelector:
            kubernetes.io/hostname: kilo
          containers:
          - name: cleanup
            image: ${DOCKER_REPO}/repominder:k8s
            command: ["./scripts/cleanup.sh"]
            envFrom:
            - secretRef:
                name: repominder-web
            - configMapRef:
                name: repominder-config
            volumeMounts:
            - name: appvol
              mountPath: /opt/repominder
          volumes:
          - name: appvol
            hostPath:
              path: /opt/k3slocal/repominder
              type: Directory
          restartPolicy: OnFailure
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: repominder-backup
spec:
  schedule: "30 0,8,16 * * *"
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  concurrencyPolicy: Replace
  jobTemplate:
    spec:
      backoffLimit: 3
      activeDeadlineSeconds: 300
      template:
        spec:
          nodeSelector:
            kubernetes.io/hostname: kilo
          containers:
          - name: backup
            image: ${DOCKER_REPO}/repominder:k8s
            command: ["./scripts/backup.sh"]
            envFrom:
            - secretRef:
                name: repominder-web
            - secretRef:
                name: scaleway-s3-secret
            - configMapRef:
                name: repominder-config
            volumeMounts:
            - name: appvol
              mountPath: /opt/repominder
          volumes:
          - name: appvol
            hostPath:
              path: /opt/k3slocal/repominder
              type: Directory
          restartPolicy: OnFailure
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: repominder-notify
spec:
  schedule: "0 12 * * 0"
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  concurrencyPolicy: Replace
  jobTemplate:
    spec:
      backoffLimit: 3
      activeDeadlineSeconds: 300
      template:
        spec:
          nodeSelector:
            kubernetes.io/hostname: kilo
          containers:
          - name: notify
            image: ${DOCKER_REPO}/repominder:k8s
            # TODO move this into scripts dir, probably pythonpath it
            command: ["python", "send_notifications.py"]
            envFrom:
            - secretRef:
                name: repominder-web
            - secretRef:
                name: scaleway-s3-secret
            - configMapRef:
                name: repominder-config
            volumeMounts:
            - name: appvol
              mountPath: /opt/repominder
          volumes:
          - name: appvol
            hostPath:
              path: /opt/k3slocal/repominder
              type: Directory
          restartPolicy: OnFailure
