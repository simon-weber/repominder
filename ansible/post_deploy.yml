---

- hosts: deploytargets
  vars_files:
    - secrets.yml
  tasks:
    - name: perform migrations
      command: "docker run {{ dockerargs }} {{ appname }}:staging python manage.py migrate --noinput"
      changed_when: 'migrate_result.stdout is defined and "No migrations to apply." not in migrate_result.stdout'

    - name: collectstatic
      command: "docker run -u=root {{ dockerargs }} {{ appname }}:staging python manage.py collectstatic -c --noinput"

    - name: check for superuser
      shell: >
        echo "from django.db import DEFAULT_DB_ALIAS as database;
        from django.contrib.auth import get_user_model;
        User = get_user_model();
        sus = User.objects.filter(is_superuser=True);
        print(any([su for su in sus if su.username == '{{ DJ_SUPERUSER }}']))"
        | docker run -i {{ dockerargs }} {{ appname }}:staging python manage.py shell
      args:
          chdir: "{{ appdir }}"
      register: superuser_present
      changed_when: False
    
    - name: create superuser if not present
      shell: >
        echo "from django.db import DEFAULT_DB_ALIAS as database;
        from django.contrib.auth import get_user_model;
        User = get_user_model();
        print(User.objects.db_manager(database).create_superuser('{{ DJ_SUPERUSER }}', '{{ DJ_SUPERUSER_EMAIL }}', '{{ DJ_SUPERUSER_PASSWORD }}'))"
        | docker run -i {{ dockerargs }} {{ appname }}:staging python manage.py shell
      args:
          chdir: "{{ appdir }}"
      when: not "True" in superuser_present.stdout

  #    - name: set site details
  #      shell: >
  #        echo "from django.contrib.sites.models import Site;
  #        s = Site.objects.get_current();
  #        s.domain = 'www.plugserv.com';
  #        s.name = 'plugserv';
  #        s.save();
  #        print(Site.objects.get_current())"
  #        | {{ venv }}/exec python manage.py shell
  #      args:
  #          chdir: "{{ appdir }}"

    - name: update remote tag
      command: docker tag {{ appname }}:staging {{ appname }}:latest

    - name: restart app service
      systemd:
        state: restarted
        daemon_reload: yes
        name: "docker-{{ appname }}"

    - name: clean up remote archives
      shell: "rm -rf {{ deploydir }}/*"

    - name: update local tag
      local_action: command docker tag {{ appname }}:staging {{ appname }}:latest
      run_once: true

      #    - name: clean up local archives
      #      local_action: shell rm ansible/*.tar.gz
      #      args:
      #        chdir: ..
      #      run_once: true

